// <auto-generated />
using System;
using IdentityMessage.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IdentityMessage.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240322093950_mig_1")]
    partial class mig_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("IdentityMessage.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("IdentityMessage.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IdentityMessage.Models.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailId"), 1L, 1);

                    b.Property<string>("AppUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJunk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrash")
                        .HasColumnType("bit");

                    b.Property<string>("MailContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MailDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MailSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("MailTime")
                        .HasColumnType("time");

                    b.Property<string>("ToUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailId");

                    b.HasIndex("AppUserID");

                    b.ToTable("Mails");

                    b.HasData(
                        new
                        {
                            MailId = 10,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 1",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Mail Konusu 1",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 11,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 2",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 2",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 12,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = false,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 4",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 3",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 13,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 4",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 4",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 14,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 5",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 5",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 15,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 6",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 6",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 16,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 7",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 7",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 17,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 8",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 8",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        },
                        new
                        {
                            MailId = 18,
                            AppUserID = "5bb5ec19-477c-4838-82ee-86840f5ebb08",
                            IsDraft = false,
                            IsImportant = false,
                            IsJunk = false,
                            IsRead = true,
                            IsTrash = false,
                            MailContent = "Gelen Mail içeriği 9",
                            MailDate = new DateTime(2024, 1, 1, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MailSubject = "Gelen Konu başlığı 9",
                            MailTime = new TimeSpan(0, 0, 0, 0, 0),
                            ToUserEmail = "brc_kdr@hotmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IdentityMessage.Models.Mail", b =>
                {
                    b.HasOne("IdentityMessage.Models.AppUser", "AppUser")
                        .WithMany("Mail")
                        .HasForeignKey("AppUserID");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("IdentityMessage.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IdentityMessage.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IdentityMessage.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("IdentityMessage.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdentityMessage.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IdentityMessage.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IdentityMessage.Models.AppUser", b =>
                {
                    b.Navigation("Mail");
                });
#pragma warning restore 612, 618
        }
    }
}
